---
import type { CollectionEntry } from "astro:content";

import BlogHero from "@/components/blog/Hero.astro";
import TOC from "@/components/blog/TOC.astro";
import WebMentions from "@/components/blog/webmentions/index.astro";
import { getAllProjects, sortProjectsByDate } from "@/data/post";

import BaseLayout from "./Base.astro";

interface Props {
  project: CollectionEntry<"project">;
}

const { project } = Astro.props;

// Fetch all projects to determine next and previous
const allProjects = await getAllProjects();
const sortedProjects = sortProjectsByDate(allProjects);
const currentIndex = sortedProjects.findIndex(p => p.slug === project.slug);
const prevProject = sortedProjects[currentIndex - 1];
const nextProject = sortedProjects[currentIndex + 1];

const {
  data: { description, ogImage, publishDate, title, updatedDate },
  slug,
} = project;
const socialImage = ogImage ?? `/og-image/${slug}.png`;
const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString();
const { headings } = await project.render();
---

<BaseLayout meta={{ articleDate, description, nextUrl: nextProject?.slug, ogImage: socialImage, prevUrl: prevProject?.slug, title }}>
  <head>
    <!-- Open Frames Metadata -->
    <meta content="vNext" property="of:version" />
    <meta content="1.0" property="of:accepts:anonymous" />
    {prevProject && (
      <>
        <meta content="Back" property="of:button:1" />
        <meta content="link" property="of:button:1:action" />
        <meta content={`/projects/${prevProject.slug}/`} property="of:button:1:target" />
      </>
    )}
    {nextProject && (
      <>
        <meta content="Forward" property="of:button:2" />
        <meta content="link" property="of:button:2:action" />
        <meta content={`/projects/${nextProject.slug}/`} property="of:button:2:target" />
      </>
    )}
    <meta content="Link" property="of:button:3" />
    <meta content="link" property="of:button:3:action" />
    <meta content={Astro.url.href} property="of:button:3:target" />
  </head>
  <div class="gap-x-10 lg:flex lg:items-start">
    {!!headings.length && <TOC headings={headings} />}
    <article class="flex-grow break-words" data-pagefind-body>
      <div id="project-hero"><BlogHero content={project} /></div>
      <div
        class="prose prose-sm prose-cactus mt-12 prose-headings:font-semibold prose-headings:text-accent-2 prose-headings:before:absolute prose-headings:before:-ms-4 prose-headings:before:text-accent sm:prose-headings:before:content-['#'] sm:prose-th:before:content-none"
      >
        <slot />
        <WebMentions />
      </div>
    </article>
  </div>
  <button
    aria-label="Back to Top"
    class="z-90 fixed bottom-8 end-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all duration-300 hover:border-zinc-400 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:bg-zinc-700 sm:end-8 sm:h-12 sm:w-12"
    data-show="false"
    id="to-top-btn"
    ><svg
      aria-hidden="true"
      class="h-6 w-6"
      fill="none"
      focusable="false"
      stroke="currentColor"
      stroke-width="2"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M4.5 15.75l7.5-7.5 7.5 7.5" stroke-linecap="round" stroke-linejoin="round"></path>
    </svg>
  </button>
</BaseLayout>

<script>
  const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
  const targetHeader = document.getElementById("project-hero") as HTMLDivElement;

  function callback(entries: IntersectionObserverEntry[]) {
    entries.forEach((entry) => {
      // only show the scroll to top button when the heading is out of view
      scrollBtn.dataset.show = (!entry.isIntersecting).toString();
    });
  }

  scrollBtn.addEventListener("click", () => {
    document.documentElement.scrollTo({ behavior: "smooth", top: 0 });
  });

  const observer = new IntersectionObserver(callback);
  observer.observe(targetHeader);
</script>